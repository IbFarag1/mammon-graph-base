"""
De-prioritizes a fragment, causing the fragment to be omitted in the initial response and delivered as a subsequent response afterward.
"""
directive @defer(
  """
  When true fragment may be deferred
  """
  if: Boolean! = true

  """
  This label should be used by GraphQL clients to identify the data from patch responses and associate it with the correct fragment.
  """
  label: String
) on INLINE_FRAGMENT | FRAGMENT_SPREAD

"""
Indicates that an input object is a oneOf input object
"""
directive @oneOf on INPUT_OBJECT

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, is compliant with the date-time format outlined in section 5.6 of the RFC 3339
profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.

This scalar is a description of an exact instant on the timeline such as the instant that a user account was created.

# Input Coercion

When expected as an input type, only RFC 3339 compliant date-time strings are accepted. All other input values raise a query error indicating an incorrect type.

# Result Coercion

Where an RFC 3339 compliant date-time string has a time-zone other than UTC, it is shifted to UTC.
For example, the date-time string 2016-01-01T14:10:20+01:00 is shifted to 2016-01-01T13:10:20Z.
"""
scalar DateTime

input IDCollectionFilterInput {
  in: [ID!]
}

type Mutation {
  """
  Create a User
  """
  userCreate(input: UserCreateInput!): UserCreatePayload

  """
  Create multiple User
  """
  userCreateMany(input: [UserCreateManyInput!]!): UserCreateManyPayload

  """
  Update a User
  """
  userUpdate(by: UserByInput!, input: UserUpdateInput!): UserUpdatePayload

  """
  Update multiple User
  """
  userUpdateMany(input: [UserUpdateManyInput!]!): UserUpdateManyPayload

  """
  Delete a User by ID or unique field
  """
  userDelete(by: UserByInput!): UserDeletePayload

  """
  Delete multiple User
  """
  userDeleteMany(input: [UserDeleteManyInput!]!): UserDeleteManyPayload

  """
  Create a Project
  """
  projectCreate(input: ProjectCreateInput!): ProjectCreatePayload

  """
  Create multiple Project
  """
  projectCreateMany(input: [ProjectCreateManyInput!]!): ProjectCreateManyPayload

  """
  Update a Project
  """
  projectUpdate(
    by: ProjectByInput!
    input: ProjectUpdateInput!
  ): ProjectUpdatePayload

  """
  Update multiple Project
  """
  projectUpdateMany(input: [ProjectUpdateManyInput!]!): ProjectUpdateManyPayload

  """
  Delete a Project by ID or unique field
  """
  projectDelete(by: ProjectByInput!): ProjectDeletePayload

  """
  Delete multiple Project
  """
  projectDeleteMany(input: [ProjectDeleteManyInput!]!): ProjectDeleteManyPayload
}

enum OrderByDirection {
  ASC
  DESC
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String
  endCursor: String
}

type Project {
  title: String!
  description: String!
  image: URL!
  liveSiteUrl: URL!
  githubUrl: URL!
  category: String!
  createdBy: User!

  """
  Unique identifier
  """
  id: ID!

  """
  when the model was updated
  """
  updatedAt: DateTime!

  """
  when the model was created
  """
  createdAt: DateTime!
}

input ProjectByInput {
  id: ID
}

input ProjectCollectionFilterInput {
  id: IDCollectionFilterInput
}

type ProjectConnection {
  """
  Information to aid in pagination
  """
  pageInfo: PageInfo!
  edges: [ProjectEdge]
}

"""
Input to create a Project
"""
input ProjectCreateInput {
  title: String!
  description: String!
  image: URL!
  liveSiteUrl: URL!
  githubUrl: URL!
  category: String!
  createdBy: ProjectToUserCreateUserRelation!
}

input ProjectCreateManyInput {
  input: ProjectCreateInput!
}

type ProjectCreateManyPayload {
  projectCollection: [Project!]!
}

type ProjectCreatePayload {
  project: Project
}

input ProjectDeleteManyInput {
  by: ProjectByInput!
}

type ProjectDeleteManyPayload {
  deletedIds: [ID!]!
}

type ProjectDeletePayload {
  deletedId: ID!
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

input ProjectOrderByInput {
  createdAt: OrderByDirection
}

type ProjectSearchConnection {
  pageInfo: PageInfo!
  searchInfo: SearchInfo
  edges: [ProjectSearchEdge!]!
}

type ProjectSearchEdge {
  node: Project!
  cursor: String!
  score: Float!
}

input ProjectSearchFilterInput {
  ALL: [ProjectSearchFilterInput!]
  ANY: [ProjectSearchFilterInput!]
  NONE: [ProjectSearchFilterInput!]
  NOT: ProjectSearchFilterInput
  category: StringSearchFilterInput
}

"""
Input to create a Project for the ProjectToUser relation of User
"""
input ProjectToUserCreateProject {
  title: String!
  description: String!
  image: URL!
  liveSiteUrl: URL!
  githubUrl: URL!
  category: String!
}

"""
Input to link to or create a Project for the ProjectToUser relation of User
"""
input ProjectToUserCreateProjectRelation {
  create: ProjectToUserCreateProject
  link: ID
}

"""
Input to create a User for the ProjectToUser relation of Project
"""
input ProjectToUserCreateUser {
  name: String!
  email: String!
  avatarUrl: URL!
  description: String
  githubUrl: URL
  linkedInUrl: URL
  projects: [ProjectToUserCreateProjectRelation!]
}

"""
Input to link to or create a User for the ProjectToUser relation of Project
"""
input ProjectToUserCreateUserRelation {
  create: ProjectToUserCreateUser
  link: ID
}

"""
Input to link/unlink to or create a Project for the ProjectToUser relation of User
"""
input ProjectToUserUpdateProjectRelation {
  create: ProjectToUserCreateProject
  link: ID
  unlink: ID
}

"""
Input to link/unlink to or create a User for the ProjectToUser relation of Project
"""
input ProjectToUserUpdateUserRelation {
  create: ProjectToUserCreateUser
  link: ID
  unlink: ID
}

"""
Input to update a Project
"""
input ProjectUpdateInput {
  title: String
  description: String
  image: URL
  liveSiteUrl: URL
  githubUrl: URL
  category: String
  createdBy: ProjectToUserUpdateUserRelation
}

input ProjectUpdateManyInput {
  by: ProjectByInput!
  input: ProjectUpdateInput!
}

type ProjectUpdateManyPayload {
  projectCollection: [Project!]!
}

type ProjectUpdatePayload {
  project: Project
}

type Query {
  """
  Query a single User by an ID or a unique field
  """
  user(
    """
    The field and value by which to query the User
    """
    by: UserByInput!
  ): User

  """
  Paginated query to fetch the whole list of `User`.
  """
  userCollection(
    after: String
    before: String
    first: Int
    last: Int
    orderBy: UserOrderByInput
    filter: UserCollectionFilterInput
  ): UserConnection

  """
  Query a single Project by an ID or a unique field
  """
  project(
    """
    The field and value by which to query the Project
    """
    by: ProjectByInput!
  ): Project

  """
  Paginated query to fetch the whole list of `Project`.
  """
  projectCollection(
    after: String
    before: String
    first: Int
    last: Int
    orderBy: ProjectOrderByInput
    filter: ProjectCollectionFilterInput
  ): ProjectConnection

  """
  Search `Project`
  """
  projectSearch(
    """
    Text to search.
    """
    query: String

    """
    Fields used for searching. Restricted to String, URL, Email and PhoneNumber fields. If not specified it defaults to all @search fields with those types.
    """
    fields: [String!]
    filter: ProjectSearchFilterInput
    first: Int
    after: String
    last: Int
    before: String
  ): ProjectSearchConnection
}

type SearchInfo {
  totalHits: Int!
}

input StringSearchFilterInput {
  ALL: [StringSearchFilterInput!]
  ANY: [StringSearchFilterInput!]
  NONE: [StringSearchFilterInput!]
  NOT: StringSearchFilterInput
  eq: String
  neq: String
  gt: String
  gte: String
  lte: String
  lt: String
  in: [String!]
  notIn: [String!]
  regex: String
}

"""
An URL as defined byÂ RFC1738. For example, `https://grafbase.com/foo/` or `mailto:example@grafbase.com`.
"""
scalar URL

type User {
  name: String!
  email: String!
  avatarUrl: URL!
  description: String
  githubUrl: URL
  linkedInUrl: URL
  projects(
    after: String
    before: String
    first: Int
    last: Int
    orderBy: UserOrderByInput
  ): ProjectConnection

  """
  Unique identifier
  """
  id: ID!

  """
  when the model was updated
  """
  updatedAt: DateTime!

  """
  when the model was created
  """
  createdAt: DateTime!
}

input UserByInput {
  id: ID
  email: String
}

input UserCollectionFilterInput {
  id: IDCollectionFilterInput
}

type UserConnection {
  """
  Information to aid in pagination
  """
  pageInfo: PageInfo!
  edges: [UserEdge]
}

"""
Input to create a User
"""
input UserCreateInput {
  name: String!
  email: String!
  avatarUrl: URL!
  description: String
  githubUrl: URL
  linkedInUrl: URL
  projects: [ProjectToUserCreateProjectRelation!]
}

input UserCreateManyInput {
  input: UserCreateInput!
}

type UserCreateManyPayload {
  userCollection: [User!]!
}

type UserCreatePayload {
  user: User
}

input UserDeleteManyInput {
  by: UserByInput!
}

type UserDeleteManyPayload {
  deletedIds: [ID!]!
}

type UserDeletePayload {
  deletedId: ID!
}

type UserEdge {
  node: User!
  cursor: String!
}

input UserOrderByInput {
  createdAt: OrderByDirection
}

"""
Input to update a User
"""
input UserUpdateInput {
  name: String
  email: String
  avatarUrl: URL
  description: String
  githubUrl: URL
  linkedInUrl: URL
  projects: [ProjectToUserUpdateProjectRelation!]
}

input UserUpdateManyInput {
  by: UserByInput!
  input: UserUpdateInput!
}

type UserUpdateManyPayload {
  userCollection: [User!]!
}

type UserUpdatePayload {
  user: User
}
